SETUP

to deploy: claudia create --region us-east-1 --api-module api
to update: claudia update --cache-api-config apiConfig
to test: https://2afo7guwib.execute-api.us-east-1.amazonaws.com/latest/pizzas


created a user with very high policies:
IAMFullAccess
AmazonS3FullAccess
AmazonAPIGatewayPushToCloudWatchLogs
AmazonDynamoDBFullAccess
AmazonAPIGatewayAdministrator
AWSCodeDeployRoleForCloudFormation
AWSCloudFormationFullAccess
AWSLambda_FullAccess
claudia (custom policy)

the custom policy is saved in the root as customPolicyForAws.json. In the aws console the name is claudia

after the deploy the response is

{
  "lambda": {
    "role": "pizza-api-executor",
    "name": "pizza-api",
    "region": "us-east-1"
  },
  "api": {
    "id": "2afo7guwib",
    "module": "api",
    "url": "https://2afo7guwib.execute-api.us-east-1.amazonaws.com/latest"
  }
}

*/



ch 3 create DynamoDB table
aws dynamodb create-table --table-name pizza-orders --attribute-definitions AttributeName=orderId,AttributeType=S --key-schema AttributeName=orderId,KeyType=HASH --provisioned-throughput ReadCapacityUnits =1,WriteCapacityUnits=1 --region us-east-1 --query TableDescription.TableArn --output json

add an IAM policy that allows your lambda function to communicate with your DB (in AWS, think of policies as a passport visa)
aws iam put-role-policy --role-name pizza-api-executor --policy-name PizzaApiDynamoDB --policy-document file://./roles/dynamodb.json"


Ch 5 Debugging
find the names of the log groups
aws logs describe-log-groups --region us-east-1

run the logs filter-log-events command from your terminal and provide the “Save an order” text as a filter. (The prefix is needed in gitBash)
MSYS_NO_PATHCONV=1 aws logs filter-log-events --filter='Save an order' --log-group-name=/aws/lambda/pizza-api --region=us-east-1 --output=json
filter only the message
MSYS_NO_PATHCONV=1 aws logs filter-log-events --filter='Save an order' --log-group-name=/aws/lambda/pizza-api --query='events[0].message' --region=us-east-1 --output=text    
MSYS_NO_PATHCONV=1 aws logs filter-log-events --filter='Order is saved' --log-group-name=/aws/lambda/pizza-api --query='events[0].message' --region=us-east-1 --output=text 
use console interface
https://console.aws.amazon.com/cloudwatch/home?region=us-east-1#logsV2:log-groups/log-group/$252Faws$252Flambda$252Fpizza-api


enable aws x-ray (add a policy to set the tracing mode to active)
aws iam attach-role-policy --policy-arn arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess --role-name pizza-api-executor --region us-east-1 --output json
update the function configuration (update the tracing-config by setting its mode to Active)
aws lambda update-function-configuration --function-name pizza-api --tracing-config Mode=Active --region us-east-1
use console interface (change time range as needed)
https://console.aws.amazon.com/xray/home?region=us-east-1#/service-map?timeRange=PT30M


Ch6 Authentication & Authorization
NOTE: working code can be found in ch6. I did not add authorization, because then the test functions do not work since we have to register the user..
create a user pool (to manage the database of users that can order a pizza)
aws cognito-idp create-user-pool --pool-name Pizzeria --policies "PasswordPolicy={MinimumLength=8,RequireUppercase=false,RequireLowercase=false,RequireNumbers=false,RequireSymbols=false}" --username-attributes email --query UserPool.id --output text
create a client in the user pool
aws cognito-idp create-user-pool-client --user-pool-id us-east-1_aOaQgtBE0 --client-name PizzeriaClient --no-generate-secret --query UserPoolClient.ClientId --output text

user pool id : us-east-1_aOaQgtBE0
app client id: 7acbnu6n8ed3gbe32s09b9nkdh
facebook app id :  466919884079273

create an identity pool (will allow you to integrate Facebook login, and give you temporary access to your Cognito user pool w/o hard coding your AWS access token and secret in the front-end) 
aws cognito-identity create-identity-pool --identity-pool-name Pizzeria --allow-unauthenticated-identities --supported-login-providers graph.facebook.com=466919884079273 --cognito-identity-providers ProviderName=arn:aws:cognito-idp:us-east-1:721520867440:userpool/us-east-1_aOaQgtBE0 ClientId=7acbnu6n8ed3gbe32s09b9nkdh,ServerSideTokenCheck=false --query IdentityPoolId --output text


Ch7 Working with files
create an s3 bucket
aws s3 mb s3://aunt-marias-pizzeria-murat --region us-east-1
